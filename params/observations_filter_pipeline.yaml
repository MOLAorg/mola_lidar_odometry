# Filters:
#
# One filter object will be created for each entry, instancing the given class,
# and with the given parameters. Filters are run in definition order on the
# input metric_map_t object.
#

# Remove points too close, to prevent "noise" from the vehicle, 
# the person next to the robot, etc. Remove too distant points since
# the tiniest angular error projects to a large translational error.
- class_name: mp2p_icp_filters::FilterByRange
  params:
    input_pointcloud_layer: 'raw'
    output_pointcloud_layer: 'filtered'
    keep_between: true # Remove points out of this range limits
    range_min: 5.0
    range_max: 100.0

- class_name: mp2p_icp_filters::FilterDecimateVoxels
  params:
    input_pointcloud_layer: 'filtered'
    output_pointcloud_layer: 'decimated_for_map_insert_finer'
    voxel_filter_resolution: 0.5  # [m]

- class_name: mp2p_icp_filters::FilterDecimateVoxels
  params:
    input_pointcloud_layer: 'filtered'
    output_pointcloud_layer: 'decimated_coarser'
    voxel_filter_resolution: 1.5  # [m]
    use_closest_to_voxel_average: true

- class_name: mp2p_icp_filters::FilterDecimateVoxels
  params:
    input_pointcloud_layer: ['edges', 'decimated_coarser']
    output_pointcloud_layer: 'decimated_for_icp'
    voxel_filter_resolution: 0.5  # [m]

# Remove layers to save memory and log file storage
- class_name: mp2p_icp_filters::FilterDeleteLayer
  params:
    pointcloud_layer_to_remove: ['raw', 'filtered', 'decimated_coarser']
